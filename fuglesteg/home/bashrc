# If not running interactively, don't do anything

case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
color_prompt=yes

unset color_prompt force_color_prompt

# VI Mode
set -o vi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Zoxide support
eval "$(zoxide init bash)"

SSH_ENV="$HOME/.ssh/agent-environment"
# Start SSH agent automatically on login
function start_agent {
    echo "Initialising new SSH agent..."
    /usr/bin/env ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/env ssh-add;
}

# Source SSH settings, if applicable

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null

ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
    start_agent;
}
else
    start_agent;
fi
. "$HOME/.cargo/env"

# PATH
PATH="$PATH:$HOME/.local/bin"
PATH="$PATH:$HOME/.cargo/bin"

PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
trap 'echo -ne "\033]0;${PWD}: (${BASH_COMMAND})\007"' DEBUG

# Csharp
dotnet-run() {
    dotnet watch run --project $(basename $PWD)
}

dotnet-test() {
    dotnet test --filter=FullyQualifiedName~$1
}

# Sets up tmux with one editor window and one server process window
tmux-vue() {
    local session_name=$(basename $PWD)
    session_name=$(echo $session_name | sed 's/\./_/')

    if ! tmux has-session -t $session_name 2> /dev/null; then
        tmux new-session -ds $session_name -c $PWD -n $session_name 'guix shell node'
        tmux new-window -t $session_name:2 -n 'server' 'guix shell node -- npm run serve'
    fi

    tmux attach-session -t $session_name
}

# Sets up tmux with one editor window, one server process window and one testing window
tmux-csharp() {
    local session_name=$(basename $PWD)
    session_name=$(echo $session_name | sed 's/\./_/')

    if ! tmux has-session -t "$session_name" 2> /dev/null; then
        tmux new-session -ds "$session_name" -c "$PWD" -n "$session_name"
        tmux new-window -t "$session_name:2" -n 'server'
        tmux new-window -t "$session_name:3" -n 'testing'
    fi

    tmux attach-session -t "$session_name"
}
